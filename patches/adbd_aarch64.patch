From a683b0fb9466941f84dd4f8f11eaa80c3163f60a Mon Sep 17 00:00:00 2001
From: HashBang <hashbang173@gmail.com>
Date: Sat, 21 Feb 2015 06:43:56 -0800
Subject: [PATCH] arm64 compatibility

---
 services.c        | 12 ++++++------
 transport_local.c |  6 +++---
 2 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/services.c b/services.c
index 73f692e..e071a8c 100644
--- a/services.c
+++ b/services.c
@@ -79,7 +79,7 @@ extern int recovery_mode;
 static void recover_service(int s, void *cookie)
 {
     unsigned char buf[4096];
-    unsigned count = (unsigned) cookie;
+    unsigned count = (unsigned long) cookie;
     int fd;
 
     fd = adb_creat("/tmp/update", 0644);
@@ -149,7 +149,7 @@ void restart_tcp_service(int fd, void *cookie)
 {
     char buf[100];
     char value[PROPERTY_VALUE_MAX];
-    int port = (int)cookie;
+    int port = (long)cookie;
 
     if (port <= 0) {
         snprintf(buf, sizeof(buf), "invalid port\n");
@@ -356,7 +356,7 @@ static int create_subprocess(const char *cmd, const char *arg0, const char *arg1
 #if !ADB_HOST
 static void subproc_waiter_service(int fd, void *cookie)
 {
-    pid_t pid = (pid_t)cookie;
+    pid_t pid = (pid_t)(long)cookie;
 
     D("entered. fd=%d of pid=%d\n", fd, pid);
     for (;;) {
@@ -410,7 +410,7 @@ static int create_subproc_thread(const char *name)
     sti = malloc(sizeof(stinfo));
     if(sti == 0) fatal("cannot allocate stinfo");
     sti->func = subproc_waiter_service;
-    sti->cookie = (void*)pid;
+    sti->cookie = (void*)(long)pid;
     sti->fd = ret_fd;
 
     if(adb_thread_create( &t, service_bootstrap_func, sti)){
@@ -470,7 +470,7 @@ int service_to_fd(const char *name)
     } else if(!strncmp(name, "framebuffer:", 12)) {
         ret = create_service_thread(framebuffer_service, 0);
     } else if(recovery_mode && !strncmp(name, "recover:", 8)) {
-        ret = create_service_thread(recover_service, (void*) atoi(name + 8));
+        ret = create_service_thread(recover_service, (void*)(long) atoi(name + 8));
     } else if (!strncmp(name, "jdwp:", 5)) {
         ret = create_jdwp_connection_fd(atoi(name+5));
     } else if (!strncmp(name, "log:", 4)) {
@@ -502,7 +502,7 @@ int service_to_fd(const char *name)
         if (sscanf(name + 6, "%d", &port) == 0) {
             port = 0;
         }
-        ret = create_service_thread(restart_tcp_service, (void *)port);
+        ret = create_service_thread(restart_tcp_service, (void *)(long)port);
     } else if(!strncmp(name, "usb:", 4)) {
         ret = create_service_thread(restart_usb_service, NULL);
 #endif
diff --git a/transport_local.c b/transport_local.c
index 105c502..ced2a15 100644
--- a/transport_local.c
+++ b/transport_local.c
@@ -156,7 +156,7 @@ static void *server_socket_thread(void * arg)
     int serverfd, fd;
     struct sockaddr addr;
     socklen_t alen;
-    int port = (int)arg;
+    int port = (long)arg;
 
     D("transport: server_socket_thread() starting\n");
     serverfd = -1;
@@ -238,7 +238,7 @@ static const char _start_req[]  = "start";
 /* 'ok' reply from the adb QEMUD service. */
 static const char _ok_resp[]    = "ok";
 
-    const int port = (int)arg;
+    const int port = (long)arg;
     int res, fd;
     char tmp[256];
     char con_name[32];
@@ -323,7 +323,7 @@ void local_init(int port)
 
     D("transport: local %s init\n", HOST ? "client" : "server");
 
-    if(adb_thread_create(&thr, func, (void *)port)) {
+    if(adb_thread_create(&thr, func, (void *)(long)port)) {
         fatal_errno("cannot create local socket %s thread",
                     HOST ? "client" : "server");
     }
