diff --git a/wifi/java/android/net/wifi/p2p/IWifiP2pManager.aidl b/wifi/java/android/net/wifi/p2p/IWifiP2pManager.aidl
index ee2e895..fa67f22 100644
--- a/wifi/java/android/net/wifi/p2p/IWifiP2pManager.aidl
+++ b/wifi/java/android/net/wifi/p2p/IWifiP2pManager.aidl
@@ -28,5 +28,6 @@ interface IWifiP2pManager
     Messenger getMessenger();
     Messenger getP2pStateMachineMessenger();
     void setMiracastMode(int mode);
+    boolean isAutonomousGroupOwner();
 }
 
diff --git a/wifi/java/android/net/wifi/p2p/WifiP2pManager.java b/wifi/java/android/net/wifi/p2p/WifiP2pManager.java
index 6409450..d90b876 100644
--- a/wifi/java/android/net/wifi/p2p/WifiP2pManager.java
+++ b/wifi/java/android/net/wifi/p2p/WifiP2pManager.java
@@ -468,6 +468,13 @@ public class WifiP2pManager {
     /** @hide */
     public static final int REPORT_NFC_HANDOVER_FAILED              = BASE + 81;
 
+    /** @hide */
+    public static final int CANCEL_WPS                              = BASE + 82;
+    /** @hide */
+    public static final int CANCEL_WPS_FAILED                       = BASE + 83;
+    /** @hide */
+    public static final int CANCEL_WPS_SUCCEDED                     = BASE + 84;
+
 
     /**
      * Create a new WifiP2pManager instance. Applications use
@@ -714,6 +721,7 @@ public class WifiP2pManager {
                     case DELETE_PERSISTENT_GROUP_FAILED:
                     case SET_WFD_INFO_FAILED:
                     case START_WPS_FAILED:
+                    case CANCEL_WPS_FAILED:
                     case START_LISTEN_FAILED:
                     case STOP_LISTEN_FAILED:
                     case SET_CHANNEL_FAILED:
@@ -740,6 +748,7 @@ public class WifiP2pManager {
                     case DELETE_PERSISTENT_GROUP_SUCCEEDED:
                     case SET_WFD_INFO_SUCCEEDED:
                     case START_WPS_SUCCEEDED:
+                    case CANCEL_WPS_SUCCEDED:
                     case START_LISTEN_SUCCEEDED:
                     case STOP_LISTEN_SUCCEEDED:
                     case SET_CHANNEL_SUCCEEDED:
@@ -1018,6 +1027,34 @@ public class WifiP2pManager {
     }
 
     /**
+     * Create a p2p group with the current device as the group owner. This essentially creates
+     * an access point that can accept connections from legacy clients as well as other p2p
+     * devices.
+     *
+     * <p class="note"><strong>Note:</strong>
+     * This function would normally not be used unless the current device needs
+     * to form a p2p connection with a legacy client
+     *
+     * <p> The function call immediately returns after sending a group creation request
+     * to the framework. The application is notified of a success or failure to initiate
+     * group creation through listener callbacks {@link ActionListener#onSuccess} or
+     * {@link ActionListener#onFailure}.
+     *
+     * <p> Application can request for the group details with {@link #requestGroupInfo}.
+     *
+     * @param c is the channel created at {@link #initialize}
+     * @param mNetId is the net id
+     * @param listener for callbacks on success or failure. Can be null.
+     */
+    public void createGroup(Channel c, int mNetId, ActionListener listener) {
+        checkChannel(c);
+        if (mNetId < 0)
+                this.createGroup(c, listener);
+        else
+                c.mAsyncChannel.sendMessage(CREATE_GROUP, mNetId, c.putListener(listener));
+    }
+
+    /**
      * Remove the current p2p group.
      *
      * <p> The function call immediately returns after sending a group removal request
@@ -1065,6 +1102,14 @@ public class WifiP2pManager {
     }
 
     /**
+     * Cancel any ongoing Wi-fi Protected Setup
+     */
+    public void cancelWps(Channel c, ActionListener listener) {
+         checkChannel(c);
+         c.mAsyncChannel.sendMessage(CANCEL_WPS, 0, c.putListener(listener));
+    }
+
+    /**
      * Register a local service for service discovery. If a local service is registered,
      * the framework automatically responds to a service discovery request from a peer.
      *
@@ -1367,6 +1412,15 @@ public class WifiP2pManager {
         }
     }
 
+    /** @hide */
+    public boolean isAutonomousGroupOwner() {
+        try {
+            return mService.isAutonomousGroupOwner();
+        } catch(RemoteException e) {
+            return false;
+        }
+    }
+
     /**
      * Get a reference to WifiP2pService handler. This is used to establish
      * an AsyncChannel communication with WifiService
