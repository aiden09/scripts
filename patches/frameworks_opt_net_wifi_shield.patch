diff --git a/service/java/com/android/server/wifi/WifiNative.java b/service/java/com/android/server/wifi/WifiNative.java
index a724fd9..9a3164f 100644
--- a/service/java/com/android/server/wifi/WifiNative.java
+++ b/service/java/com/android/server/wifi/WifiNative.java
@@ -708,6 +708,10 @@ public class WifiNative {
         return doBooleanCommand("WPS_CANCEL");
     }
 
+    public boolean cancelWps(String iface) {
+        return doBooleanCommandNative("IFNAME=" + iface + " WPS_CANCEL");
+    }
+
     public boolean setPersistentReconnect(boolean enabled) {
         int value = (enabled == true) ? 1 : 0;
         return doBooleanCommand("SET persistent_reconnect " + value);
diff --git a/service/java/com/android/server/wifi/p2p/WifiP2pServiceImpl.java b/service/java/com/android/server/wifi/p2p/WifiP2pServiceImpl.java
index 2a397ba..fb34544 100644
--- a/service/java/com/android/server/wifi/p2p/WifiP2pServiceImpl.java
+++ b/service/java/com/android/server/wifi/p2p/WifiP2pServiceImpl.java
@@ -337,6 +337,7 @@ public final class WifiP2pServiceImpl extends IWifiP2pManager.Stub {
               case WifiP2pManager.STOP_LISTEN:
               case WifiP2pManager.SET_CHANNEL:
               case WifiP2pManager.START_WPS:
+              case WifiP2pManager.CANCEL_WPS:
               case WifiP2pManager.ADD_LOCAL_SERVICE:
               case WifiP2pManager.REMOVE_LOCAL_SERVICE:
               case WifiP2pManager.CLEAR_LOCAL_SERVICES:
@@ -462,6 +463,13 @@ public final class WifiP2pServiceImpl extends IWifiP2pManager.Stub {
         mP2pStateMachine.sendMessage(SET_MIRACAST_MODE, mode);
     }
 
+    /** This is used to provide the information that there is an active autonomous GO and
+      * applications should call create/remove p2p interface accordingly
+      */
+    public boolean isAutonomousGroupOwner() {
+        return mAutonomousGroup;
+    }
+
     @Override
     protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
         if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP)
@@ -700,6 +708,10 @@ public final class WifiP2pServiceImpl extends IWifiP2pManager.Stub {
                     replyToMessage(message, WifiP2pManager.START_WPS_FAILED,
                         WifiP2pManager.BUSY);
                     break;
+                case WifiP2pManager.CANCEL_WPS:
+                    replyToMessage(message, WifiP2pManager.CANCEL_WPS_FAILED,
+                        WifiP2pManager.BUSY);
+                    break;
                 case WifiP2pManager.GET_HANDOVER_REQUEST:
                 case WifiP2pManager.GET_HANDOVER_SELECT:
                     replyToMessage(message, WifiP2pManager.RESPONSE_GET_HANDOVER_MESSAGE, null);
@@ -845,6 +857,10 @@ public final class WifiP2pServiceImpl extends IWifiP2pManager.Stub {
                     replyToMessage(message, WifiP2pManager.START_WPS_FAILED,
                             WifiP2pManager.P2P_UNSUPPORTED);
                     break;
+                case WifiP2pManager.CANCEL_WPS:
+                    replyToMessage(message, WifiP2pManager.CANCEL_WPS_FAILED,
+                            WifiP2pManager.P2P_UNSUPPORTED);
+                    break;
                 case WifiP2pManager.START_LISTEN:
                     replyToMessage(message, WifiP2pManager.START_LISTEN_FAILED,
                             WifiP2pManager.P2P_UNSUPPORTED);
@@ -1339,8 +1355,10 @@ public final class WifiP2pServiceImpl extends IWifiP2pManager.Stub {
                         } else {
                             ret = mWifiNative.p2pGroupAdd(true);
                         }
-                    } else {
+                    } else if (netId == -1) {
                         ret = mWifiNative.p2pGroupAdd(false);
+                    } else {
+                        ret = mWifiNative.p2pGroupAdd(netId);
                     }
 
                     if (ret) {
@@ -2073,6 +2091,13 @@ public final class WifiP2pServiceImpl extends IWifiP2pManager.Stub {
                     replyToMessage(message, ret ? WifiP2pManager.START_WPS_SUCCEEDED :
                             WifiP2pManager.START_WPS_FAILED);
                     break;
+                case WifiP2pManager.CANCEL_WPS:
+                    if (mWifiNative.cancelWps(mGroup.getInterface())) {
+                        replyToMessage(message, WifiP2pManager.CANCEL_WPS_SUCCEDED);
+                    } else {
+                        replyToMessage(message, WifiP2pManager.CANCEL_WPS_FAILED, WifiP2pManager.ERROR);
+                    }
+                    break;
                 case WifiP2pManager.CONNECT:
                     WifiP2pConfig config = (WifiP2pConfig) message.obj;
                     if (isConfigInvalid(config)) {
